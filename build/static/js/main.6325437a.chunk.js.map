{"version":3,"sources":["firebase.js","Todo.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","Todo","props","classes","useState","open","setopen","input","setInput","Modal","onClose","e","className","placeholder","todo","value","onChange","event","target","Button","onClick","collection","doc","id","set","merge","List","ListItem","ListItemAvatar","ListItemText","primary","secondary","delete","App","todos","setTodos","useEffect","orderBy","onSnapshot","snapshot","docs","map","data","FormControl","InputLabel","Input","disabled","type","preventDefault","add","timestamp","FieldValue","serverTimestamp","variant","color","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6325437a.chunk.js","sourcesContent":["// const  firebaseConfig = {\r\n    // apiKey: \"AIzaSyBlO_6MEnVD-AoHJtEd1VDtCKxfWc26_Rc\",\r\n    // authDomain: \"todo-list-6b113.firebaseapp.com\",\r\n    // databaseURL: \"https://todo-list-6b113.firebaseio.com\",\r\n    // projectId: \"todo-list-6b113\",\r\n    // storageBucket: \"todo-list-6b113.appspot.com\",\r\n    // messagingSenderId: \"1020708744319\",\r\n    // appId: \"1:1020708744319:web:cf9d071fd09c660712a34a\",\r\n    // measurementId: \"G-F7N54VS6XC\"\r\n//   };\r\n\r\nimport firebase from \"firebase\";\r\nconst firebaseApp =firebase.initializeApp({\r\n        apiKey: \"AIzaSyBlO_6MEnVD-AoHJtEd1VDtCKxfWc26_Rc\",\r\n        authDomain: \"todo-list-6b113.firebaseapp.com\",\r\n        databaseURL: \"https://todo-list-6b113.firebaseio.com\",\r\n        projectId: \"todo-list-6b113\",\r\n        storageBucket: \"todo-list-6b113.appspot.com\",\r\n        messagingSenderId: \"1020708744319\",\r\n        appId: \"1:1020708744319:web:cf9d071fd09c660712a34a\",\r\n        measurementId: \"G-F7N54VS6XC\"\r\n});\r\nconst db=firebaseApp.firestore();\r\n \r\nexport default db;","import React , {useState} from 'react';\r\nimport './Todo.css';\r\nimport { ListItem , List, ListItemText,ListItemAvatar,Button,Modal} from '@material-ui/core'\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport db from './firebase';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n      position: 'absolute',\r\n      width: 400,\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: '2px solid #000',\r\n      boxShadow: theme.shadows[5],\r\n      padding: theme.spacing(2, 4, 3),\r\n    },\r\n  }));\r\n\r\n\r\nfunction Todo(props) {\r\n    const classes = useStyles();\r\n    const [open,setopen]=useState(false);\r\n    const[input,setInput]=useState();      \r\n    const handleopen=()=>{\r\n        setopen(true);\r\n    };\r\n    const updateTodo=() =>{\r\n        setopen(false);\r\n        db.collection('todos').doc(props.todo.id).set({\r\n          todo: input  \r\n        },{merge: true})\r\n    }\r\n    return (\r\n        <>\r\n        <Modal\r\n            open={open}\r\n            onClose={e => setopen(false)}\r\n            >\r\n                <div className={classes.paper}>\r\n                    <h1>You can edit here</h1>\r\n                    <input placeholder={props.todo.todo} value={input} onChange={event => setInput(event.target.value)}></input>\r\n                    <Button onClick={updateTodo}>update todo</Button>\r\n                </div>\r\n        </Modal>\r\n        <List>\r\n            <ListItem>\r\n                <ListItemAvatar>\r\n                </ListItemAvatar>\r\n                <ListItemText primary={props.todo.todo} secondary='deadline ðŸ•—'></ListItemText>\r\n            </ListItem> \r\n            <button onClick={e => setopen(true)}>edit</button>\r\n            <DeleteForeverIcon onClick={event => db.collection('todos').doc(props.todo.id).delete()}></DeleteForeverIcon>\r\n        </List>\r\n        </>\r\n    )\r\n}\r\n \r\nexport default Todo\r\n","import React, { useState,useEffect } from 'react';\nimport './App.css';\nimport Todo from './Todo'\nimport { Button } from '@material-ui/core';\nimport { FormControl,Input,InputLabel } from '@material-ui/core';\nimport db from './firebase';\nimport firebase from 'firebase';\nfunction App() {\n  const [todos,setTodos]=useState([]);//set up short term memory \n  const [input,setInput]=useState('');\n useEffect(() => {\n   db.collection('todos').orderBy('timestamp','desc').onSnapshot(snapshot => {\n    setTodos(snapshot.docs.map(doc =>({id: doc.id,todo: doc.data().todo})))\n   })\n }, [])\n  const addTodo=(event) =>{\n    event.preventDefault();\n    db.collection('todos').add({\n      todo: input ,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    })\n\n    setTodos([...todos, input]);//spread\n    setInput('');\n  } \n  return (\n    <div className=\"App\">\n     <h1>hello todo-list ðŸ”¥ðŸš€ </h1>\n\n     <form >\n     <FormControl>\n       <InputLabel> âœ” write a Todo</InputLabel>\n       <Input  value={input} onChange={event => setInput(event.target.value)}/>\n     </FormControl>\n     <Button disabled ={!input} type='submit' onClick={addTodo} variant=\"contained\" color=\"primary\">\n        addTodo\n     </Button>\n     </form>\n     <ul>\n       {\n         todos.map(todo => (\n           <Todo todo={todo}/>  \n         ))\n       }\n     </ul>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}